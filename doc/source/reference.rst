.. toctree::
   :maxdepth: 2

==========
User guide
==========

-------------------
Package description
-------------------

Introduction
============

The package description is a text file, by default named bento.info. Its
syntax is indentation-based, and lines starting with `#` are ignored (comments).

A typical .info file contains the following information:

    * The package metadata (name, version, etc...)
    * Optionally, it may contain addition user-customizable options such as
      path or flags, whose exact value may be set at configure time.
    * A Library section, which defines the package content (packages, modules,
      C extensions, etc...)
    * Optionally, the .info file may contain one or several Executable
      sections, to describe programs expected to be run from the command line
      or from a GUI. This is where distutils scripts and setuptools console
      scripts are defined.

Each section consists of field:value pairs:

    * Both fields and values are case-sensitive.
    * Tab characters for indentation are not supported.

Package metadata
----------------

Almost every metadata supported in distutils/setuptools is supported in bento
file format. For a simple package containing one module hello, the
bento.info metadata definition would look like::

    Name: hello
    Version: 0.0.1
    Summary: A one-line description of the distribution
    Description:
        A longer, potentially multi-line string.

        As long as the indentation is maintained, the field is considered as
        continued.
    Author: John Doe
    AuthorEmail: john@doe.org
    License: BSD

Library section
---------------

Executable section
------------------

User-options declaration
------------------------

Pure python packages
====================

Assuming a package with the following layout::

    hello/pkg1/__init__.py
    hello/pkg1/...
    hello/pkg2/__init__.py
    hello/pkg2/...
    hello/__init__.py

it would be declared as follows::

    Name: hello
    Version: 0.0.1

    Library:
        Packages:
            hello.pkg1,
            hello.pkg2,
            hello

The following syntax is also allowed::

    Library:
        Packages:
            hello.pkg1, hello.pkg2, hello

as well as::

    Library:
        Packages: hello.pkg1, hello.pkg2, hello

Packages containing C extensions
================================

For a simple extension hello._foo, built from sources src/foo.c and src/bar.c,
the declaration is as follows::

    Library:
        Extension: hello._foo
            Sources:
                src/foo.c,
                src/bar.c

Note: none of the other distutils Extension arguments (macro definitions,
etc...) are supported yet.

Packages with data files
========================

Adding data files in bento is easy. By data files, we mean any file other
than C extension sources and python files. There are two kinds of data files in bento:

    * Installed data files: those are installed somewhere on the user system at
      installation time (distutils package_data and data_files, numpy.distutils
      add_data_files and add_data_dir).
    * Extra source files: those are only necessary to build the package, and
      are not installed. As such, they only need to be included in the source
      tarball (distutils MANIFEST[.in] mechanism, automatic inclusion from the
      VCS in setuptools, etc...)

Extra source files
------------------

Extra source files are simply declared in the section ExtraSourceFiles (outside
any Library section)::

    ExtraSourceFiles:
        AUTHORS,
        CHANGES,
        EXAMPLES,
        LICENSE,
        Makefile,
        README,
        TODO,
        babel.cfg

Those will be always be included in the tarball generated by bento sdist. A
limited form of globbing is allowed::

    ExtraSourceFiles:
        doc/source/*.rst
        doc/source/chapter1/*.rst

that is globbing on every file with the same extension is allowed. Any other
form of globbing, in particular recursive ones are purposedly not supported to
avoid cluttering the tarball by accident.

Installed data files
--------------------

It is often needed to install data files within the rest of the package.
Bento's system is both simple and flexible enough so that any file in your
sources can be installed anywhere. The most simple syntax for data files is as
follows::

    DataFiles:
        TargetDir: /etc
        Files:
            somefile.conf

This installs the file somefile.conf into /etc. Using hardcoded paths should be
avoided, though. Bento allows you to use "dynamic" path instead. This scheme
should be familiar to people who have used autotools::

    DataFiles:
        TargetDir: $sysconfdir
        Files:
            somefile.conf

$sysconfigdir is a path variable: bento defines several path variables
(available on every platform), which may be customized at the configure stage.
For example, on Unix, $sysconfdir is defined as $prefix/etc, and prefix is
itself defined as /usr/local. If prefix is changed, sysconfdir will be changed
accordingly. Of course, sysconfdir itself may be customized as well. This
allows for very flexible installation layout, and every particular install
scheme (distutils --user, self-contained as in GoboLinux or Mac OS X) may be
implemented on top.

It is also possible to define your own path variables (see `Path option`_
section).

Srcdir field
~~~~~~~~~~~~

By default, the installed name is the concatenation of target and the values in
files, e.g.::

    DataFiles:
        TargetDir: $includedir
        Files:
            foo/bar.h

will be installed as $includedir/foo/bar.h. If instead, you want to install
foo/bar.h as $includedir/bar.h, you need to use the srcdir field::

    DataFiles:
        TargetDir: $includedir
        SourceDir: foo
        Files:
            bar.h

Named data files section
~~~~~~~~~~~~~~~~~~~~~~~~

You can define as many DataFiles sections as you want, as long as you name
them, i.e.::

    DataFiles: man1
        TargetDir: $mandir/man1
        SourceDir: doc/man
        Files:
            *.1

    DataFiles: man3
        TargetDir: $mandir/man3
        SourceDir: doc/man
        Files:
            *.3

is ok, but::

    DataFiles:
        TargetDir: $mandir/man1
        SourceDir: doc/man
        Files:
            *.1

    DataFiles:
        TargetDir: $mandir/man3
        SourceDir: doc/man
        Files:
            *.3

is not.

Conditionals
============

It is not always possible to have one same package description for every
platform. It may also be desirable to enable/disable some parts of a package
depending on some option. For this reason, the .info file supports a limited
form of conditional. For example::

    Library:
        InstallRequires:
            docutils,
            sphinx
            if os(windows):
                pywin32

The following conditional forms are available:

    - os(value): condition on the OS
    - flag(value): user-defined flag, boolean

Adding custom options
=====================

Path option
-----------

A new path option may be added::

    Path: octavedir
        Description: octave directory
        Default: $datadir/octave

Bentomaker automatically adds an --octavedir option (with help taken from the
description), and $octavedir may be used inside the .info file.

Flag option
-----------

A new flag option may be added::

    Flag: debug
        Description: build debug
        Default: false

Bentomaker automatically adds an --octavedir option (with help taken from the
description), and $octavedir may be used inside the .info file.

-----------------------------------------------
Bentomaker, the command line interface to bento
-----------------------------------------------

Introduction
============

Bentomaker is a simple python package which uses bento API to configure, build
and install packages. A simple install with bentomaker looks like this::

    bentomaker configure --prefix=/home/david/local
    bentomaker build
    bentomaker install

Bentomaker has a basic help facility::

    bentomaker help

will list all available commands. Once the project is configured, every
installation path and user customization is set up, and cannot be changed
(except by reconfiguring the package, of course). Bentomaker is still in its
infancy, and quite limited:

    - it will complain when you try to install without having run build first (it
      will not automatically run build for you).
    - Both build and install commands are simplistic: no dependency checking is
      done (everything is rebuilt everytime you run build, every install
      installs everything), everything is built in sources, etc...
    - As a starting point, building C extensions is still done through distutils

Available commands
==================

configure
---------

This command must be run before any build/install command. It is similar to
the well-known configure script from autoconf. Every customizable option is
available from the command help::

    bentomaker configure -h

build
-----

This simply builds the package. For pure-python packages, it does almost
nothing, except producing a `Build manifest`_. For packages with C extensions,
the C extensions are built (through distutils ATM).

install
-------

build_egg
---------

This command builds an egg from the package description. It currently requires
that configure and build commands have been run.

*This is experimental - although I intend to produce eggs which are as backward
compatible as possible with existing tools (in particular enstaller, and
hopefully virtualenv and buildout), eggs are implementation defined, and depend
a lot on distutils idiosyncraties.*

sdist
-----

This simply produces a source tarball. Currently, only .tar.gz is supported.

convert
-------

This converts a package built from distutils, setuptools or numpy.distutils::

    bentomaker convert

If successful, it will produce a bento.info file.

*This is experimental, and may not work. Also, it cannot convert every package
accurately, as it is based on inspecting setup.py's execution*. Nevertheless,
it can already convert simple, but non trivial packages such as sphinx pretty
accurately.

Implementation details
======================

Build manifest
--------------

.. _sphinx: http://sphinx.pocoo.org
